<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>

	<!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项 resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties 
		<properties resource="application.properties" /> url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties. 
		<properties url="" /> 注意，两个属性只能选址一个; 另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用 -->
	<properties resource="application.properties" />
	<!-- classPathEntry:数据库的JDBC驱动的jar包地址 -->
	<classPathEntry location="E:\git\java\mysql-connector-java-6.0.6.jar" 
		/> 
	<!-- context:生成一组对象的环境 id:必选，上下文id，用于在生成错误时提示 defaultModelType:指定生成对象的样式 
		1，conditional：类似hierarchical； 2，flat：所有内容（主键，blob）等全部生成在一个对象中； 3，hierarchical：主键生成一个XXKey对象(key 
		class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class) targetRuntime: 1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample 
		2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample -->
	<context id="kidostatistics" >
		<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表； 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
		<property name="autoDelimitKeywords" value="false" />
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8" />
		<!-- 格式化java代码 -->
		<property name="javaFormatter"
			value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter"
			value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />

		<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />

		<jdbcConnection connectionURL="${datasource.statistics.jdbc-url}"
			driverClass="${datasource.statistics.driver-class-name}" password="${datasource.statistics.password}" userId="${datasource.statistics.username}" />
		<!-- mapper实体 -->
		<javaModelGenerator targetPackage="aaron.cheng.mybatis.entry"
			targetProject="src/main/java" />
		<!-- mapper sql xml文件 -->
		<sqlMapGenerator targetPackage="mapper/kidostatistics"
			targetProject="src/main/resources" />
		<!-- mapper接口 -->
		<javaClientGenerator targetPackage="aaron.cheng.mybatis.dao.kidostatistics"
			targetProject="src/main/java" type="XMLMAPPER" />


		

		<!-- tableName: 用于自动生成代码的数据库表 domainObjectName:对应于数据库表的javaBean类名 -->
		<table tableName="child_wifi" schema = ""
		enableCountByExample="false"
		enableDeleteByExample = "false"
		enableSelectByExample = "false"
		enableUpdateByExample = "false"
		selectByExampleQueryId="false" >
			
			<!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法 -->
			<property name="useActualColumnNames" value="false" />
			<!-- 返回主键 -->
			<generatedKey column="Id" sqlStatement="MySql" identity="true" />
			<!-- 忽略列，不生成bean 字段 -->
			<ignoreColumn column="OperationTime" />
			
			<!-- columnOverride用来修改 表中某个列的属性，MBG会使用修改后的列来生成domain的属性, column:要重新设置的列名 
				注意，一个table元素中可以有多个columnOverride元素 -->
			<columnOverride column="OperationType">
				<!-- 使用property属性来指定列要生成的属性名称 -->
				<property name="property" value="opType" />
				<!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名 <property name="javaType" value=""/> -->

				
				<!-- jdbcType用于指定该列的JDBC类型 <property name="jdbcType" value=""/> -->

				<!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler 
					只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述 -->
			</columnOverride>	
		</table>
	</context>
	
	<context id="kidodata" >
		<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表； 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
		<property name="autoDelimitKeywords" value="false" />
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8" />
		<!-- 格式化java代码 -->
		<property name="javaFormatter"
			value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter"
			value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />

		<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />

		<jdbcConnection connectionURL="${datasource.kidodata.master.jdbc-url}"
			driverClass="${datasource.kidodata.master.driver-class-name}" password="${datasource.kidodata.master.password}" userId="${datasource.kidodata.master.username}" />
		<!-- mapper实体 -->
		<javaModelGenerator targetPackage="aaron.cheng.mybatis.entry"
			targetProject="src/main/java" />
		<!-- mapper sql xml文件 -->
		<sqlMapGenerator targetPackage="mapper/kidodata"
			targetProject="src/main/resources" />
		<!-- mapper接口 -->
		<javaClientGenerator targetPackage="aaron.cheng.mybatis.dao.kidodata"
			targetProject="src/main/java" type="XMLMAPPER" />


		<!-- tableName: 用于自动生成代码的数据库表 domainObjectName:对应于数据库表的javaBean类名 -->
		<table tableName="child_home_school" schema = ""
		enableCountByExample="false"
		enableDeleteByExample = "false"
		enableSelectByExample = "false"
		enableUpdateByExample = "false"
		selectByExampleQueryId="false" >
			<!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法 -->
			<property name="useActualColumnNames" value="false" />
		</table>
	</context>
</generatorConfiguration>